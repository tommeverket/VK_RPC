import time
import vk_api
from pypresence import Presence
import sys
from datetime import datetime
import requests
import urllib.parse
import json
import os
import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import io

class MusicTracker:
    def __init__(self, config):
        self.config = config
        self.last_track = None
        self.track_start_time = time.time()
        self.last_artwork_url = None
        self.rpc_connected = False
        self.root = None
        self.frame1 = None
        self.frame2 = None
        
    def connect_vk(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK API"""
        try:
            self.vk_session = vk_api.VkApi(token=self.config['vk_token'])
            self.vk = self.vk_session.get_api()
            user_info = self.vk.users.get()
            self.user_name = f"{user_info[0]['first_name']} {user_info[0]['last_name']}"
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK: {e}")
            return False
    
    def connect_discord(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Discord RPC"""
        try:
            self.RPC = Presence(self.config['discord_client_id'])
            self.RPC.connect()
            self.rpc_connected = True
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord: {e}")
            return False
    
    def update_discord_presence(self, artist, title, duration=0):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Discord Rich Presence"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è RPC
            rpc_data = {
                'details': title[:128],
                'state': artist[:128],
                'large_image': 'music',
                'large_text': f"{artist} - {title}"[:128]
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            if self.config['show_buttons']:
                rpc_data['buttons'] = [{"label": "VK –ú—É–∑—ã–∫–∞", "url": "https://vk.com/music"}]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
            if self.config['search_artwork'] and self.last_artwork_url:
                rpc_data['large_image'] = self.last_artwork_url
            
            self.RPC.update(**rpc_data)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Discord RPC: {e}")
    
    def clear_presence(self):
        """–û—á–∏—Å—Ç–∫–∞ Discord —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            if self.rpc_connected:
                self.RPC.clear()
                print(f"–°—Ç–∞—Ç—É—Å –æ—á–∏—â–µ–Ω")
        except:
            pass

def search_apple_music_artwork(artist, title):
    """–ü–æ–∏—Å–∫ –æ–±–ª–æ–∂–∫–∏ —á–µ—Ä–µ–∑ Apple Music API"""
    try:
        query = f"{artist} {title}"
        encoded_query = urllib.parse.quote(query)
        url = f"https://itunes.apple.com/search?term={encoded_query}&media=music&limit=1"
        
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('resultCount', 0) > 0:
                track = data['results'][0]
                artwork_url = track.get('artworkUrl100', '')
                if artwork_url:
                    high_res_url = artwork_url.replace('100x100bb', '512x512bb').replace('100x100', '512x512')
                    return high_res_url
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±–ª–æ–∂–∫–∏: {e}")
        return None

def get_current_track(vk):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
    try:
        status = vk.status.get()
        
        if 'audio' in status and status['audio']:
            audio = status['audio']
            
            # –ï—Å–ª–∏ audio - —Å–ª–æ–≤–∞—Ä—å (–æ–¥–∏–Ω —Ç—Ä–µ–∫)
            if isinstance(audio, dict):
                track = audio
                if 'artist' in track and 'title' in track:
                    return {
                        'artist': track['artist'],
                        'title': track['title'],
                        'duration': track.get('duration', 0)
                    }
            
            # –ï—Å–ª–∏ audio - —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤)
            elif isinstance(audio, list) and len(audio) > 0:
                track = audio[0]
                if isinstance(track, dict) and 'artist' in track and 'title' in track:
                    return {
                        'artist': track['artist'],
                        'title': track['title'],
                        'duration': track.get('duration', 0)
                    }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'text' –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if 'text' in status and status['text']:
            text = status['text']
            if ' ‚Äî ' in text:
                parts = text.split(' ‚Äî ', 1)
                if len(parts) == 2:
                    return {
                        'artist': parts[0].strip(),
                        'title': parts[1].strip(),
                        'duration': 0
                    }
            elif ' - ' in text:
                parts = text.split(' - ', 1)
                if len(parts) == 2:
                    return {
                        'artist': parts[0].strip(),
                        'title': parts[1].strip(),
                        'duration': 0
                    }
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
    
    return None

class VKMusicRPCApp:
    def __init__(self):
        self.tracker = None
        self.running = False
        self.paused = False
        self.no_track_count = 0  # –°—á–µ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–∫–æ–≤
        self.setup_gui()
        
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root = tk.Tk()
        self.root.title("VK Music Discord RPC")
        self.root.geometry("600x400")
        self.root.configure(bg='#1f1f1f')
        self.root.resizable(False, False)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã
        self.create_frames()
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ñ—Ä–µ–π–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        self.frame2.grid_remove()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        self.check_connection()
        
    def create_frames(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö —Ñ—Ä–µ–π–º–æ–≤"""
        # Frame 1 - —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.frame1 = tk.Frame(self.root, bg='#333333', width=580, height=380)
        self.frame1.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.header_label = tk.Label(
            self.frame1, 
            text="Logged In as User Name", 
            font=("Arial", 10), 
            bg='#333333', 
            fg='white'
        )
        self.header_label.place(x=10, y=10)
        
        # –û–±–ª–æ–∂–∫–∞
        self.cover_frame = tk.Frame(self.frame1, bg='#444444', width=120, height=120)
        self.cover_frame.place(x=10, y=30)
        self.cover_label = tk.Label(
            self.cover_frame, 
            text="üéµ", 
            bg='#444444', 
            fg='white', 
            font=("Arial", 48),
            justify='center'
        )
        self.cover_label.pack(expand=True, fill='both')
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        self.title_label = tk.Label(
            self.frame1, 
            text="Title", 
            font=("Arial", 20, "bold"), 
            bg='#333333', 
            fg='white',
            wraplength=420,
            justify='left'
        )
        self.title_label.place(x=140, y=30)
        
        self.artist_label = tk.Label(
            self.frame1, 
            text="Artist", 
            font=("Arial", 16), 
            bg='#333333', 
            fg='white',
            wraplength=420,
            justify='left'
        )
        self.artist_label.place(x=140, y=80)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(
            self.frame1, 
            text="Discord RPC is running!", 
            font=("Arial", 10), 
            bg='#333333', 
            fg='green'
        )
        self.status_label.place(x=140, y=120)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        self.hint_label = tk.Label(
            self.frame1, 
            text="", 
            font=("Arial", 9), 
            bg='#333333', 
            fg='orange',
            wraplength=400,
            justify='left'
        )
        self.hint_label.place(x=140, y=140)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
        self.pause_button = tk.Button(
            self.frame1, 
            text="Pause", 
            command=self.toggle_pause, 
            bg='#ff9900', 
            fg='white', 
            font=("Arial", 10, "bold"),
            width=10
        )
        self.pause_button.place(x=500, y=350)
        
        # Frame 2 - –æ—à–∏–±–∫–∞
        self.frame2 = tk.Frame(self.root, bg='#333333', width=580, height=380)
        self.frame2.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        # –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        self.error_label = tk.Label(
            self.frame2, 
            text="Error! You're not logged in!\nCheck config.json !", 
            font=("Arial", 16), 
            bg='#333333', 
            fg='white',
            justify='center'
        )
        self.error_label.place(relx=0.5, rely=0.4, anchor='center')
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã –¥–ª—è –æ—à–∏–±–∫–∏
        self.pause_button2 = tk.Button(
            self.frame2, 
            text="Pause", 
            command=self.toggle_pause, 
            bg='#ff9900', 
            fg='white', 
            font=("Arial", 10, "bold"),
            width=10
        )
        self.pause_button2.place(relx=0.5, rely=0.6, anchor='center')
        
    def truncate_text(self, text, max_length):
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º ..."""
        if len(text) <= max_length:
            return text
        return text[:max_length-3] + "..."
    
    def adjust_font_size(self, text, base_size, max_chars):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞"""
        if len(text) <= max_chars:
            return base_size
        reduction = (len(text) - max_chars) // 4
        return max(10, base_size - reduction)
    
    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        if config is None:
            self.show_error()
            return
            
        if config['vk_token'] == "–í–°–¢–ê–í–¨–¢–ï_–°–Æ–î–ê_–í–ê–®_–¢–û–ö–ï–ù_–í–ö":
            self.show_error()
            return
            
        if config['discord_client_id'] == "–í–ê–®_DISCORD_APP_CLIENT_ID":
            self.show_error()
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
        self.tracker = MusicTracker(config)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if self.tracker.connect_vk():
            if self.tracker.connect_discord():
                self.show_success()
                self.start_tracking()
            else:
                self.show_error()
        else:
            self.show_error()
    
    def show_success(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        self.frame2.grid_remove()
        self.frame1.grid()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_display = self.truncate_text(f"Logged In as {self.tracker.user_name}", 40)
        self.header_label.config(text=user_display)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ–±–ª–æ–∂–∫—É
        self.set_default_image()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.config(text="Discord RPC is running!", fg='green')
        self.hint_label.config(text="")  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        
    def show_error(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.frame1.grid_remove()
        self.frame2.grid()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.config(text="Error connecting to services", fg='red')
        
    def set_default_image(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ–±–ª–æ–∂–∫—É - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å"""
        try:
            print("–°–±—Ä–æ—Å –æ–±–ª–æ–∂–∫–∏ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª –Ω–æ—Ç—ã
            self.cover_label.config(image="", text="üéµ", font=("Arial", 48))
            # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(self.cover_label, 'image'):
                delattr(self.cover_label, 'image')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ–±–ª–æ–∂–∫–∏: {e}")
            try:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                self.cover_label.config(text="üéµ", font=("Arial", 48))
            except:
                pass
    
    def show_hint(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
        hint_text = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–∫–ª—é—á–∏—Ç–µ '–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç—É—Å' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö VK –ú—É–∑—ã–∫–∏"
        self.hint_label.config(text=hint_text)
        
    def hide_hint(self):
        """–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        self.hint_label.config(text="")
    
    def toggle_pause(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã"""
        self.paused = not self.paused
        if self.paused:
            self.pause_button.config(text="Resume")
            self.pause_button2.config(text="Resume")
            self.status_label.config(text="Discord RPC is paused", fg='orange')
            # –û—á–∏—â–∞–µ–º Discord —Å—Ç–∞—Ç—É—Å
            if self.tracker:
                self.tracker.clear_presence()
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self.no_track_count = 0
            self.hide_hint()
        else:
            self.pause_button.config(text="Pause")
            self.pause_button2.config(text="Pause")
            self.status_label.config(text="Discord RPC is running!", fg='green')
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            if self.running:
                self.check_track()
    
    def start_tracking(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.running = True
        self.no_track_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.check_track()
        
    def check_track(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        if not self.running or self.paused:
            return
            
        try:
            track_info = get_current_track(self.tracker.vk)
            
            if track_info:
                artist = track_info['artist']
                title = track_info['title']
                
                current_track = (artist, title)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Ç—Ä–µ–∫–∞
                if current_track != self.tracker.last_track:
                    # –ù–æ–≤—ã–π —Ç—Ä–µ–∫!
                    print(f"–ù–æ–≤—ã–π —Ç—Ä–µ–∫: {artist} - {title}")
                    self.tracker.last_track = current_track
                    self.tracker.last_artwork_url = None  # –°–±—Ä–æ—Å –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    title_display = self.truncate_text(title, 50)
                    artist_display = self.truncate_text(artist, 40)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
                    title_size = self.adjust_font_size(title, 20, 35)
                    artist_size = self.adjust_font_size(artist, 16, 30)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º UI
                    self.title_label.config(
                        text=title_display,
                        font=("Arial", title_size, "bold")
                    )
                    self.artist_label.config(
                        text=artist_display,
                        font=("Arial", artist_size)
                    )
                    
                    # –ò—â–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
                    if self.tracker.config['search_artwork']:
                        print("–ü–æ–∏—Å–∫ –æ–±–ª–æ–∂–∫–∏...")
                        artwork_url = search_apple_music_artwork(artist, title)
                        if artwork_url:
                            print("–û–±–ª–æ–∂–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
                            self.tracker.last_artwork_url = artwork_url
                            self.load_image_from_url(artwork_url)
                        else:
                            print("–û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                            self.set_default_image()
                    else:
                        self.set_default_image()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º Discord RPC
                    self.tracker.update_discord_presence(artist, title)
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                    self.no_track_count = 0
                    self.hide_hint()
                    
                else:
                    # –¢–æ—Ç –∂–µ —Ç—Ä–µ–∫, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º RPC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    self.tracker.update_discord_presence(artist, title)
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    self.no_track_count = 0
                    self.hide_hint()
                
            else:
                # –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç
                self.no_track_count += 1
                print(f"–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°—á–µ—Ç—á–∏–∫: {self.no_track_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ—Å–ª–µ 3-—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑ —Ç—Ä–µ–∫–∞
                if self.no_track_count >= 3:
                    self.show_hint()
                
                # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –±—ã–ª, —Ç–æ –æ—á–∏—â–∞–µ–º
                if self.tracker.last_track is not None:
                    print("–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - —Å–±—Ä–æ—Å –æ–±–ª–æ–∂–∫–∏")
                    self.clear_display()
                    self.tracker.clear_presence()
                    self.tracker.last_track = None
                    self.tracker.last_artwork_url = None
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –æ–±–ª–æ–∂–∫–∏
                    self.root.after(100, self.set_default_image)
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    self.no_track_count = 0
                    self.hide_hint()
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(2000, self.check_track)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    def clear_display(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–ø–ª–µ—è"""
        self.title_label.config(
            text="Title", 
            font=("Arial", 20, "bold")
        )
        self.artist_label.config(
            text="Artist", 
            font=("Arial", 16)
        )
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –æ–±–ª–æ–∂–∫–∏
        self.set_default_image()
        
    def load_image_from_url(self, url):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
        try:
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏: {url}")
            response = requests.get(url, timeout=5)
            img = Image.open(io.BytesIO(response.content))
            # –†–µ—Å–∞–π–∑ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            img = img.resize((120, 120), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(img)
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.cover_label.config(image=photo, text="")
            self.cover_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            print("–û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            self.hide_hint()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.set_default_image()
    
    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        self.running = False
        if self.tracker:
            self.tracker.clear_presence()
            try:
                self.tracker.RPC.close()
            except:
                pass
        self.root.destroy()
        sys.exit()

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    config_file = 'config.json'
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    default_config = {
        "vk_token": "–í–°–¢–ê–í–¨–¢–ï_–°–Æ–î–ê_–í–ê–®_–¢–û–ö–ï–ù_–í–ö",
        "discord_client_id": "–í–ê–®_DISCORD_APP_CLIENT_ID",
        "check_interval": 2,
        "search_artwork": True,
        "use_apple_music": True,
        "show_buttons": True,
        "debug_mode": False
    }
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not os.path.exists(config_file):
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        return default_config
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        for key in default_config:
            if key not in config:
                config[key] = default_config[key]
        
        return config
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

if __name__ == "__main__":
    app = VKMusicRPCApp()
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    app.root.protocol("WM_DELETE_WINDOW", app.on_close)
    app.root.mainloop()